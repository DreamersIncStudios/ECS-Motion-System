//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.8.2
//     from Assets/Game Code/Player Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;
using UnityEngine;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player Controls"",
    ""maps"": [
        {
            ""name"": ""Player Controller "",
            ""id"": ""b5aef3d3-06cc-4324-929f-1f362836dcf2"",
            ""actions"": [
                {
                    ""name"": ""Locomotion"",
                    ""type"": ""Value"",
                    ""id"": ""106a4ea7-759a-4d9c-8e60-552515fff293"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""StickDeadzone"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Camera"",
                    ""type"": ""Value"",
                    ""id"": ""10d677c5-b8bb-46c3-b456-0021e5d7f06f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""ScaleVector2(x=100,y=100)"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""1ad93aec-9fd3-450c-a1e7-7dd668af037f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Light Attack"",
                    ""type"": ""Button"",
                    ""id"": ""11f9a12b-e9c7-4980-95b2-07b60b69afea"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Heavy Attack"",
                    ""type"": ""Button"",
                    ""id"": ""99442cfc-a54a-454a-85c9-bc5c5cf92544"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Block"",
                    ""type"": ""Button"",
                    ""id"": ""141759a0-dd17-4190-8b5a-6d96a78e738f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dodge"",
                    ""type"": ""Button"",
                    ""id"": ""8bdcea19-91bb-4502-bcbd-7a97b678144b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Open Cad Menu"",
                    ""type"": ""Button"",
                    ""id"": ""18e60335-3643-46f4-86c9-c057bbf7ed1c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Close Cad Menu"",
                    ""type"": ""Button"",
                    ""id"": ""d56ce35c-57fd-424d-8493-69b1126feece"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Projectile"",
                    ""type"": ""Button"",
                    ""id"": ""e069cb81-7484-4878-b138-eb7c0465b06b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause Game "",
                    ""type"": ""Button"",
                    ""id"": ""618cec8c-60fc-4d03-8fd9-604673ff5f35"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""StyleMod Press"",
                    ""type"": ""Button"",
                    ""id"": ""b5e5abe1-ee9c-4674-9631-64297041ed50"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Spell Change"",
                    ""type"": ""Button"",
                    ""id"": ""2e9a8eec-176a-4c76-8574-19da01e88ee9"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""StyleMod Release"",
                    ""type"": ""Button"",
                    ""id"": ""e6fabb2a-7d03-4b3a-b3f9-ef6a584a21c3"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""AttackButtonHeld"",
                    ""type"": ""Button"",
                    ""id"": ""cc0ae9a8-42d6-43bc-8f9c-74bc9508d47f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LockOn"",
                    ""type"": ""Button"",
                    ""id"": ""36faa901-bd0d-463c-b8a5-51ad71c424c5"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChangeTargetPos"",
                    ""type"": ""Button"",
                    ""id"": ""440175d2-198f-449e-ba2a-3bd8743086db"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChangeTargetNeg"",
                    ""type"": ""Button"",
                    ""id"": ""c71150a4-76cc-4b07-8bcf-d094dd878616"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c3689af0-1b88-4e79-86a5-e27737683e91"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Xbox;Dual Sense"",
                    ""action"": ""Locomotion"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""54b11057-dfec-43c0-a183-aff4598ff199"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Locomotion"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""519b386a-3bc6-404e-a350-a94c990fdfdb"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Locomotion"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""5f31ca85-def3-433e-8e7c-c0c709c9ff08"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Locomotion"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""404abb31-26c7-494c-9668-177191681b16"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Locomotion"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""2a87378a-732f-401c-a7c8-1372a8acf407"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Locomotion"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""9c6e4dac-b22e-4237-8e3c-15c7e6b5ad80"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f7cd3632-a363-42cb-a9c5-81d184604a5b"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Dual Sense"",
                    ""action"": ""Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ed1f2ce5-fa6f-4a14-8739-65052010020a"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8e6d9053-b568-4bfd-b008-a67ec07d61af"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Xbox;Dual Sense"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bca36062-76c6-44ef-9605-877ce83b7482"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Xbox;Dual Sense"",
                    ""action"": ""Light Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""32019488-d518-4713-aa94-3592fd6a9b55"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Dual Sense;Xbox"",
                    ""action"": ""Heavy Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b13be56a-2be9-44fa-ac21-d3870fa3d92b"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Xbox;Dual Sense"",
                    ""action"": ""Block"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0d4eaeb4-129c-483f-beb9-16f004a50e32"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Xbox;Dual Sense"",
                    ""action"": ""Dodge"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""320ef8c6-b240-49c8-9fd1-ff2a1483d0da"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Open Cad Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f0718752-51b1-427f-bde5-676dd07c82cb"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause Game "",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c5174cbe-0fe0-46b3-89d7-bb03d1dc923c"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Close Cad Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7b856984-7fe1-4a7f-85cf-c5d29af035aa"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StyleMod Press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ee41826f-30bc-468f-a4d9-20b9929a6aed"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Spell Change"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a5fcf237-1ea3-4e3d-8952-a6b4cf0f8758"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StyleMod Release"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5a6a7a9a-70cf-4849-8a2e-302e6aab981e"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Dual Sense;Xbox"",
                    ""action"": ""AttackButtonHeld"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""75f31215-d3df-44f8-af62-32148bd3c493"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Xbox;Dual Sense"",
                    ""action"": ""AttackButtonHeld"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""70c291fa-37a5-4b96-b6a1-e836aa712058"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Xbox;Dual Sense"",
                    ""action"": ""LockOn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f285951f-a7ed-478b-887a-5d98954fbc0b"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Xbox;Dual Sense"",
                    ""action"": ""ChangeTargetNeg"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f5145f24-3b6e-4682-85e4-59f7befe4641"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Xbox;Dual Sense"",
                    ""action"": ""ChangeTargetPos"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Pause Menu"",
            ""id"": ""1a8c1747-02e0-4703-a531-3dac517aff08"",
            ""actions"": [
                {
                    ""name"": ""Pause Game"",
                    ""type"": ""Button"",
                    ""id"": ""5425bdc3-15f5-4602-93bb-00a33d897adf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""18ac62b0-986f-41d1-89b4-e62bba0e1029"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause Game"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Magic Controller"",
            ""id"": ""8b4e3c8e-70e9-4d11-9437-535807cb8108"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""4efad67d-ae4e-417c-b282-94b483030d5f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Open Cad Menu"",
                    ""type"": ""Button"",
                    ""id"": ""9766ee41-c6b1-4497-ad7f-0e0fb39f94f3"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""2881ad09-afab-4f7e-9810-661e143eff9a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Light Attack"",
                    ""type"": ""Button"",
                    ""id"": ""deb08cdb-e125-4743-9b0d-881653695cb5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Heavy Attack"",
                    ""type"": ""Button"",
                    ""id"": ""e1a815eb-eaf5-4529-a0dd-0c5897ac5caa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dodge"",
                    ""type"": ""Button"",
                    ""id"": ""a7026777-d09c-4d0e-96f5-944c9d5ba777"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Close Cad Menu"",
                    ""type"": ""Button"",
                    ""id"": ""17fa57ba-e2d5-420a-85b4-df611e05cfc0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4ed3c061-635a-40d4-9382-59abb117c942"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""98cf6b32-43d3-4080-b7e4-c69004cceec2"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3b0a786f-7d91-4dba-9f61-866abd0d6689"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Xbox;Dual Sense"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a0dec4f5-97ad-40c6-ac82-d6d932a9cd17"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Xbox;Dual Sense"",
                    ""action"": ""Light Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""317e1343-7322-48a5-8448-788e4542702b"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Dual Sense;Xbox"",
                    ""action"": ""Heavy Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2d3dd472-f631-4ec6-8da7-19380bdfbc46"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Xbox;Dual Sense"",
                    ""action"": ""Dodge"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""556b8ac4-2a32-4e12-a014-cec319f4d8bc"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Open Cad Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""225d5f2d-e6ad-4085-b41d-54dccd3f9f1a"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Close Cad Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Xbox"",
            ""bindingGroup"": ""Xbox"",
            ""devices"": []
        },
        {
            ""name"": ""Dual Sense"",
            ""bindingGroup"": ""Dual Sense"",
            ""devices"": []
        },
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": []
        }
    ]
}");
        // Player Controller 
        m_PlayerController = asset.FindActionMap("Player Controller ", throwIfNotFound: true);
        m_PlayerController_Locomotion = m_PlayerController.FindAction("Locomotion", throwIfNotFound: true);
        m_PlayerController_Camera = m_PlayerController.FindAction("Camera", throwIfNotFound: true);
        m_PlayerController_Jump = m_PlayerController.FindAction("Jump", throwIfNotFound: true);
        m_PlayerController_LightAttack = m_PlayerController.FindAction("Light Attack", throwIfNotFound: true);
        m_PlayerController_HeavyAttack = m_PlayerController.FindAction("Heavy Attack", throwIfNotFound: true);
        m_PlayerController_Block = m_PlayerController.FindAction("Block", throwIfNotFound: true);
        m_PlayerController_Dodge = m_PlayerController.FindAction("Dodge", throwIfNotFound: true);
        m_PlayerController_OpenCadMenu = m_PlayerController.FindAction("Open Cad Menu", throwIfNotFound: true);
        m_PlayerController_CloseCadMenu = m_PlayerController.FindAction("Close Cad Menu", throwIfNotFound: true);
        m_PlayerController_Projectile = m_PlayerController.FindAction("Projectile", throwIfNotFound: true);
        m_PlayerController_PauseGame = m_PlayerController.FindAction("Pause Game ", throwIfNotFound: true);
        m_PlayerController_StyleModPress = m_PlayerController.FindAction("StyleMod Press", throwIfNotFound: true);
        m_PlayerController_SpellChange = m_PlayerController.FindAction("Spell Change", throwIfNotFound: true);
        m_PlayerController_StyleModRelease = m_PlayerController.FindAction("StyleMod Release", throwIfNotFound: true);
        m_PlayerController_AttackButtonHeld = m_PlayerController.FindAction("AttackButtonHeld", throwIfNotFound: true);
        m_PlayerController_LockOn = m_PlayerController.FindAction("LockOn", throwIfNotFound: true);
        m_PlayerController_ChangeTargetPos = m_PlayerController.FindAction("ChangeTargetPos", throwIfNotFound: true);
        m_PlayerController_ChangeTargetNeg = m_PlayerController.FindAction("ChangeTargetNeg", throwIfNotFound: true);
        // Pause Menu
        m_PauseMenu = asset.FindActionMap("Pause Menu", throwIfNotFound: true);
        m_PauseMenu_PauseGame = m_PauseMenu.FindAction("Pause Game", throwIfNotFound: true);
        // Magic Controller
        m_MagicController = asset.FindActionMap("Magic Controller", throwIfNotFound: true);
        m_MagicController_Newaction = m_MagicController.FindAction("New action", throwIfNotFound: true);
        m_MagicController_OpenCadMenu = m_MagicController.FindAction("Open Cad Menu", throwIfNotFound: true);
        m_MagicController_Jump = m_MagicController.FindAction("Jump", throwIfNotFound: true);
        m_MagicController_LightAttack = m_MagicController.FindAction("Light Attack", throwIfNotFound: true);
        m_MagicController_HeavyAttack = m_MagicController.FindAction("Heavy Attack", throwIfNotFound: true);
        m_MagicController_Dodge = m_MagicController.FindAction("Dodge", throwIfNotFound: true);
        m_MagicController_CloseCadMenu = m_MagicController.FindAction("Close Cad Menu", throwIfNotFound: true);
    }

    ~@PlayerControls()
    {
        Debug.Assert(!m_PlayerController.enabled, "This will cause a leak and performance issues, PlayerControls.PlayerController.Disable() has not been called.");
        Debug.Assert(!m_PauseMenu.enabled, "This will cause a leak and performance issues, PlayerControls.PauseMenu.Disable() has not been called.");
        Debug.Assert(!m_MagicController.enabled, "This will cause a leak and performance issues, PlayerControls.MagicController.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player Controller 
    private readonly InputActionMap m_PlayerController;
    private List<IPlayerControllerActions> m_PlayerControllerActionsCallbackInterfaces = new List<IPlayerControllerActions>();
    private readonly InputAction m_PlayerController_Locomotion;
    private readonly InputAction m_PlayerController_Camera;
    private readonly InputAction m_PlayerController_Jump;
    private readonly InputAction m_PlayerController_LightAttack;
    private readonly InputAction m_PlayerController_HeavyAttack;
    private readonly InputAction m_PlayerController_Block;
    private readonly InputAction m_PlayerController_Dodge;
    private readonly InputAction m_PlayerController_OpenCadMenu;
    private readonly InputAction m_PlayerController_CloseCadMenu;
    private readonly InputAction m_PlayerController_Projectile;
    private readonly InputAction m_PlayerController_PauseGame;
    private readonly InputAction m_PlayerController_StyleModPress;
    private readonly InputAction m_PlayerController_SpellChange;
    private readonly InputAction m_PlayerController_StyleModRelease;
    private readonly InputAction m_PlayerController_AttackButtonHeld;
    private readonly InputAction m_PlayerController_LockOn;
    private readonly InputAction m_PlayerController_ChangeTargetPos;
    private readonly InputAction m_PlayerController_ChangeTargetNeg;
    public struct PlayerControllerActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerControllerActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Locomotion => m_Wrapper.m_PlayerController_Locomotion;
        public InputAction @Camera => m_Wrapper.m_PlayerController_Camera;
        public InputAction @Jump => m_Wrapper.m_PlayerController_Jump;
        public InputAction @LightAttack => m_Wrapper.m_PlayerController_LightAttack;
        public InputAction @HeavyAttack => m_Wrapper.m_PlayerController_HeavyAttack;
        public InputAction @Block => m_Wrapper.m_PlayerController_Block;
        public InputAction @Dodge => m_Wrapper.m_PlayerController_Dodge;
        public InputAction @OpenCadMenu => m_Wrapper.m_PlayerController_OpenCadMenu;
        public InputAction @CloseCadMenu => m_Wrapper.m_PlayerController_CloseCadMenu;
        public InputAction @Projectile => m_Wrapper.m_PlayerController_Projectile;
        public InputAction @PauseGame => m_Wrapper.m_PlayerController_PauseGame;
        public InputAction @StyleModPress => m_Wrapper.m_PlayerController_StyleModPress;
        public InputAction @SpellChange => m_Wrapper.m_PlayerController_SpellChange;
        public InputAction @StyleModRelease => m_Wrapper.m_PlayerController_StyleModRelease;
        public InputAction @AttackButtonHeld => m_Wrapper.m_PlayerController_AttackButtonHeld;
        public InputAction @LockOn => m_Wrapper.m_PlayerController_LockOn;
        public InputAction @ChangeTargetPos => m_Wrapper.m_PlayerController_ChangeTargetPos;
        public InputAction @ChangeTargetNeg => m_Wrapper.m_PlayerController_ChangeTargetNeg;
        public InputActionMap Get() { return m_Wrapper.m_PlayerController; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerControllerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerControllerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerControllerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerControllerActionsCallbackInterfaces.Add(instance);
            @Locomotion.started += instance.OnLocomotion;
            @Locomotion.performed += instance.OnLocomotion;
            @Locomotion.canceled += instance.OnLocomotion;
            @Camera.started += instance.OnCamera;
            @Camera.performed += instance.OnCamera;
            @Camera.canceled += instance.OnCamera;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @LightAttack.started += instance.OnLightAttack;
            @LightAttack.performed += instance.OnLightAttack;
            @LightAttack.canceled += instance.OnLightAttack;
            @HeavyAttack.started += instance.OnHeavyAttack;
            @HeavyAttack.performed += instance.OnHeavyAttack;
            @HeavyAttack.canceled += instance.OnHeavyAttack;
            @Block.started += instance.OnBlock;
            @Block.performed += instance.OnBlock;
            @Block.canceled += instance.OnBlock;
            @Dodge.started += instance.OnDodge;
            @Dodge.performed += instance.OnDodge;
            @Dodge.canceled += instance.OnDodge;
            @OpenCadMenu.started += instance.OnOpenCadMenu;
            @OpenCadMenu.performed += instance.OnOpenCadMenu;
            @OpenCadMenu.canceled += instance.OnOpenCadMenu;
            @CloseCadMenu.started += instance.OnCloseCadMenu;
            @CloseCadMenu.performed += instance.OnCloseCadMenu;
            @CloseCadMenu.canceled += instance.OnCloseCadMenu;
            @Projectile.started += instance.OnProjectile;
            @Projectile.performed += instance.OnProjectile;
            @Projectile.canceled += instance.OnProjectile;
            @PauseGame.started += instance.OnPauseGame;
            @PauseGame.performed += instance.OnPauseGame;
            @PauseGame.canceled += instance.OnPauseGame;
            @StyleModPress.started += instance.OnStyleModPress;
            @StyleModPress.performed += instance.OnStyleModPress;
            @StyleModPress.canceled += instance.OnStyleModPress;
            @SpellChange.started += instance.OnSpellChange;
            @SpellChange.performed += instance.OnSpellChange;
            @SpellChange.canceled += instance.OnSpellChange;
            @StyleModRelease.started += instance.OnStyleModRelease;
            @StyleModRelease.performed += instance.OnStyleModRelease;
            @StyleModRelease.canceled += instance.OnStyleModRelease;
            @AttackButtonHeld.started += instance.OnAttackButtonHeld;
            @AttackButtonHeld.performed += instance.OnAttackButtonHeld;
            @AttackButtonHeld.canceled += instance.OnAttackButtonHeld;
            @LockOn.started += instance.OnLockOn;
            @LockOn.performed += instance.OnLockOn;
            @LockOn.canceled += instance.OnLockOn;
            @ChangeTargetPos.started += instance.OnChangeTargetPos;
            @ChangeTargetPos.performed += instance.OnChangeTargetPos;
            @ChangeTargetPos.canceled += instance.OnChangeTargetPos;
            @ChangeTargetNeg.started += instance.OnChangeTargetNeg;
            @ChangeTargetNeg.performed += instance.OnChangeTargetNeg;
            @ChangeTargetNeg.canceled += instance.OnChangeTargetNeg;
        }

        private void UnregisterCallbacks(IPlayerControllerActions instance)
        {
            @Locomotion.started -= instance.OnLocomotion;
            @Locomotion.performed -= instance.OnLocomotion;
            @Locomotion.canceled -= instance.OnLocomotion;
            @Camera.started -= instance.OnCamera;
            @Camera.performed -= instance.OnCamera;
            @Camera.canceled -= instance.OnCamera;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @LightAttack.started -= instance.OnLightAttack;
            @LightAttack.performed -= instance.OnLightAttack;
            @LightAttack.canceled -= instance.OnLightAttack;
            @HeavyAttack.started -= instance.OnHeavyAttack;
            @HeavyAttack.performed -= instance.OnHeavyAttack;
            @HeavyAttack.canceled -= instance.OnHeavyAttack;
            @Block.started -= instance.OnBlock;
            @Block.performed -= instance.OnBlock;
            @Block.canceled -= instance.OnBlock;
            @Dodge.started -= instance.OnDodge;
            @Dodge.performed -= instance.OnDodge;
            @Dodge.canceled -= instance.OnDodge;
            @OpenCadMenu.started -= instance.OnOpenCadMenu;
            @OpenCadMenu.performed -= instance.OnOpenCadMenu;
            @OpenCadMenu.canceled -= instance.OnOpenCadMenu;
            @CloseCadMenu.started -= instance.OnCloseCadMenu;
            @CloseCadMenu.performed -= instance.OnCloseCadMenu;
            @CloseCadMenu.canceled -= instance.OnCloseCadMenu;
            @Projectile.started -= instance.OnProjectile;
            @Projectile.performed -= instance.OnProjectile;
            @Projectile.canceled -= instance.OnProjectile;
            @PauseGame.started -= instance.OnPauseGame;
            @PauseGame.performed -= instance.OnPauseGame;
            @PauseGame.canceled -= instance.OnPauseGame;
            @StyleModPress.started -= instance.OnStyleModPress;
            @StyleModPress.performed -= instance.OnStyleModPress;
            @StyleModPress.canceled -= instance.OnStyleModPress;
            @SpellChange.started -= instance.OnSpellChange;
            @SpellChange.performed -= instance.OnSpellChange;
            @SpellChange.canceled -= instance.OnSpellChange;
            @StyleModRelease.started -= instance.OnStyleModRelease;
            @StyleModRelease.performed -= instance.OnStyleModRelease;
            @StyleModRelease.canceled -= instance.OnStyleModRelease;
            @AttackButtonHeld.started -= instance.OnAttackButtonHeld;
            @AttackButtonHeld.performed -= instance.OnAttackButtonHeld;
            @AttackButtonHeld.canceled -= instance.OnAttackButtonHeld;
            @LockOn.started -= instance.OnLockOn;
            @LockOn.performed -= instance.OnLockOn;
            @LockOn.canceled -= instance.OnLockOn;
            @ChangeTargetPos.started -= instance.OnChangeTargetPos;
            @ChangeTargetPos.performed -= instance.OnChangeTargetPos;
            @ChangeTargetPos.canceled -= instance.OnChangeTargetPos;
            @ChangeTargetNeg.started -= instance.OnChangeTargetNeg;
            @ChangeTargetNeg.performed -= instance.OnChangeTargetNeg;
            @ChangeTargetNeg.canceled -= instance.OnChangeTargetNeg;
        }

        public void RemoveCallbacks(IPlayerControllerActions instance)
        {
            if (m_Wrapper.m_PlayerControllerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerControllerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerControllerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerControllerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerControllerActions @PlayerController => new PlayerControllerActions(this);

    // Pause Menu
    private readonly InputActionMap m_PauseMenu;
    private List<IPauseMenuActions> m_PauseMenuActionsCallbackInterfaces = new List<IPauseMenuActions>();
    private readonly InputAction m_PauseMenu_PauseGame;
    public struct PauseMenuActions
    {
        private @PlayerControls m_Wrapper;
        public PauseMenuActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @PauseGame => m_Wrapper.m_PauseMenu_PauseGame;
        public InputActionMap Get() { return m_Wrapper.m_PauseMenu; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PauseMenuActions set) { return set.Get(); }
        public void AddCallbacks(IPauseMenuActions instance)
        {
            if (instance == null || m_Wrapper.m_PauseMenuActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PauseMenuActionsCallbackInterfaces.Add(instance);
            @PauseGame.started += instance.OnPauseGame;
            @PauseGame.performed += instance.OnPauseGame;
            @PauseGame.canceled += instance.OnPauseGame;
        }

        private void UnregisterCallbacks(IPauseMenuActions instance)
        {
            @PauseGame.started -= instance.OnPauseGame;
            @PauseGame.performed -= instance.OnPauseGame;
            @PauseGame.canceled -= instance.OnPauseGame;
        }

        public void RemoveCallbacks(IPauseMenuActions instance)
        {
            if (m_Wrapper.m_PauseMenuActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPauseMenuActions instance)
        {
            foreach (var item in m_Wrapper.m_PauseMenuActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PauseMenuActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PauseMenuActions @PauseMenu => new PauseMenuActions(this);

    // Magic Controller
    private readonly InputActionMap m_MagicController;
    private List<IMagicControllerActions> m_MagicControllerActionsCallbackInterfaces = new List<IMagicControllerActions>();
    private readonly InputAction m_MagicController_Newaction;
    private readonly InputAction m_MagicController_OpenCadMenu;
    private readonly InputAction m_MagicController_Jump;
    private readonly InputAction m_MagicController_LightAttack;
    private readonly InputAction m_MagicController_HeavyAttack;
    private readonly InputAction m_MagicController_Dodge;
    private readonly InputAction m_MagicController_CloseCadMenu;
    public struct MagicControllerActions
    {
        private @PlayerControls m_Wrapper;
        public MagicControllerActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_MagicController_Newaction;
        public InputAction @OpenCadMenu => m_Wrapper.m_MagicController_OpenCadMenu;
        public InputAction @Jump => m_Wrapper.m_MagicController_Jump;
        public InputAction @LightAttack => m_Wrapper.m_MagicController_LightAttack;
        public InputAction @HeavyAttack => m_Wrapper.m_MagicController_HeavyAttack;
        public InputAction @Dodge => m_Wrapper.m_MagicController_Dodge;
        public InputAction @CloseCadMenu => m_Wrapper.m_MagicController_CloseCadMenu;
        public InputActionMap Get() { return m_Wrapper.m_MagicController; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MagicControllerActions set) { return set.Get(); }
        public void AddCallbacks(IMagicControllerActions instance)
        {
            if (instance == null || m_Wrapper.m_MagicControllerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MagicControllerActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
            @OpenCadMenu.started += instance.OnOpenCadMenu;
            @OpenCadMenu.performed += instance.OnOpenCadMenu;
            @OpenCadMenu.canceled += instance.OnOpenCadMenu;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @LightAttack.started += instance.OnLightAttack;
            @LightAttack.performed += instance.OnLightAttack;
            @LightAttack.canceled += instance.OnLightAttack;
            @HeavyAttack.started += instance.OnHeavyAttack;
            @HeavyAttack.performed += instance.OnHeavyAttack;
            @HeavyAttack.canceled += instance.OnHeavyAttack;
            @Dodge.started += instance.OnDodge;
            @Dodge.performed += instance.OnDodge;
            @Dodge.canceled += instance.OnDodge;
            @CloseCadMenu.started += instance.OnCloseCadMenu;
            @CloseCadMenu.performed += instance.OnCloseCadMenu;
            @CloseCadMenu.canceled += instance.OnCloseCadMenu;
        }

        private void UnregisterCallbacks(IMagicControllerActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
            @OpenCadMenu.started -= instance.OnOpenCadMenu;
            @OpenCadMenu.performed -= instance.OnOpenCadMenu;
            @OpenCadMenu.canceled -= instance.OnOpenCadMenu;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @LightAttack.started -= instance.OnLightAttack;
            @LightAttack.performed -= instance.OnLightAttack;
            @LightAttack.canceled -= instance.OnLightAttack;
            @HeavyAttack.started -= instance.OnHeavyAttack;
            @HeavyAttack.performed -= instance.OnHeavyAttack;
            @HeavyAttack.canceled -= instance.OnHeavyAttack;
            @Dodge.started -= instance.OnDodge;
            @Dodge.performed -= instance.OnDodge;
            @Dodge.canceled -= instance.OnDodge;
            @CloseCadMenu.started -= instance.OnCloseCadMenu;
            @CloseCadMenu.performed -= instance.OnCloseCadMenu;
            @CloseCadMenu.canceled -= instance.OnCloseCadMenu;
        }

        public void RemoveCallbacks(IMagicControllerActions instance)
        {
            if (m_Wrapper.m_MagicControllerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMagicControllerActions instance)
        {
            foreach (var item in m_Wrapper.m_MagicControllerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MagicControllerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MagicControllerActions @MagicController => new MagicControllerActions(this);
    private int m_XboxSchemeIndex = -1;
    public InputControlScheme XboxScheme
    {
        get
        {
            if (m_XboxSchemeIndex == -1) m_XboxSchemeIndex = asset.FindControlSchemeIndex("Xbox");
            return asset.controlSchemes[m_XboxSchemeIndex];
        }
    }
    private int m_DualSenseSchemeIndex = -1;
    public InputControlScheme DualSenseScheme
    {
        get
        {
            if (m_DualSenseSchemeIndex == -1) m_DualSenseSchemeIndex = asset.FindControlSchemeIndex("Dual Sense");
            return asset.controlSchemes[m_DualSenseSchemeIndex];
        }
    }
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    public interface IPlayerControllerActions
    {
        void OnLocomotion(InputAction.CallbackContext context);
        void OnCamera(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnLightAttack(InputAction.CallbackContext context);
        void OnHeavyAttack(InputAction.CallbackContext context);
        void OnBlock(InputAction.CallbackContext context);
        void OnDodge(InputAction.CallbackContext context);
        void OnOpenCadMenu(InputAction.CallbackContext context);
        void OnCloseCadMenu(InputAction.CallbackContext context);
        void OnProjectile(InputAction.CallbackContext context);
        void OnPauseGame(InputAction.CallbackContext context);
        void OnStyleModPress(InputAction.CallbackContext context);
        void OnSpellChange(InputAction.CallbackContext context);
        void OnStyleModRelease(InputAction.CallbackContext context);
        void OnAttackButtonHeld(InputAction.CallbackContext context);
        void OnLockOn(InputAction.CallbackContext context);
        void OnChangeTargetPos(InputAction.CallbackContext context);
        void OnChangeTargetNeg(InputAction.CallbackContext context);
    }
    public interface IPauseMenuActions
    {
        void OnPauseGame(InputAction.CallbackContext context);
    }
    public interface IMagicControllerActions
    {
        void OnNewaction(InputAction.CallbackContext context);
        void OnOpenCadMenu(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnLightAttack(InputAction.CallbackContext context);
        void OnHeavyAttack(InputAction.CallbackContext context);
        void OnDodge(InputAction.CallbackContext context);
        void OnCloseCadMenu(InputAction.CallbackContext context);
    }
}
